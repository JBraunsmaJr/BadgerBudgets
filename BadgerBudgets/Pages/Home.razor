@page "/"
@using Color = MudBlazor.Color
@using ApexCharts
@using BadgerBudgets.Services

<PageTitle>Dashboard</PageTitle>

<MudContainer>
    <MudItem xs="12">
        <MudButton Color="Color.Dark"
                   IconColor="Color.Tertiary"
                   StartIcon="@Icons.Material.Filled.Clear"
                   Variant="Variant.Filled"
                   OnClick="@(() => { StatementService.Items.Clear(); StateHasChanged(); })">
            Clear Statements
        </MudButton>
    </MudItem>
    <MudGrid Spacing="3" Class="pa-4">
        @foreach (var source in StatementService.SourceMaterials)
        {
            <MudItem>
                <MudFileUpload T="IBrowserFile"
                               FilesChanged="@(file => OnFileUpload(source.Key, file))"
                               Accept=".csv"
                               Hidden="@false"
                               InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                               InputStyle="opacity:0">
                    <ButtonTemplate>
                        <MudPaper Height="100%" Width="100%"
                                  Outlined
                                  Class="@_dragClass"
                                  @ondragenter="@SetDragClass"
                                  @ondragleave="@ClearDragClass"
                                  @ondragend="@ClearDragClass">
                            <MudText Typo="Typo.h6">
                                Drag and drop files from @source.Key into here
                            </MudText>

                            <MudButton HtmlTag="label"
                                       for="@context.Id"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       Style="display: none">
                                Upload
                            </MudButton>
                        </MudPaper>
                    </ButtonTemplate>
                </MudFileUpload>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@if (StatementService.Items.Count > 0)
{
    _items = FilterQuery.OrderBy(x=>x.Date).ToList();
    
    <MudContainer>
        <MudGrid Spacing="3" Class="pa-4">
            <MudItem xs="12">
                <MudToolBar>
                    <MudDateRangePicker Label="Filter by Date Range"
                                        MinDate="@StatementService.Items.Min(x=>x.Date.ToDateTime(TimeOnly.Parse("12:00 AM")))"
                                        MaxDate="@StatementService.Items.Max(x=>x.Date.ToDateTime(TimeOnly.Parse("11:59 PM")))"
                                        @bind-DateRange="@_filterDateRange"/>
                    
                    <MudTooltip Text="View last 3 months">
                        <MudButton IconClass="@Icons.Material.Filled.CalendarViewMonth"
                                   Color="Color.Tertiary"
                                   OnClick="@(()=>SetDateRangeToLastThreeMonths())">
                            Last 3
                        </MudButton>
                    </MudTooltip>
                    
                    <MudTooltip Text="View last month">
                        <MudIconButton Icon="@Icons.Material.Filled.CalendarViewMonth"
                                       Color="Color.Secondary"
                                       OnClick="@(()=>SetDateRangeToLastMonth())"/>
                    </MudTooltip>
                    
                    <MudTooltip Text="View current month">
                        <MudIconButton Icon="@Icons.Material.Filled.CalendarViewMonth"
                                       Color="Color.Primary"
                                       OnClick="@(()=>SetDateRangeToCurrentMonth())"/>
                    </MudTooltip>
                </MudToolBar>
            </MudItem>
            
            <MudItem xs="12">
                <MudToolBar>
                    <MudSelect T="string" MultiSelection="true" SelectAll="true" 
                               SelectAllText="Select all Categories" @bind-Value="selectedCategory" @bind-SelectedValues="selectedCategories" 
                               MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionCategory))" Label="Categories" 
                               OnClose="@(async () => { await UpdateCharts(); StateHasChanged(); })"
                               AdornmentIcon="@Icons.Material.Filled.Category">
                        @foreach (var category in StatementService.Items.Select(x=>x.Category.Value).Distinct())
                        {
                            <MudSelectItem T="string" Value="@category">@category</MudSelectItem>
                        }
                    </MudSelect>
                </MudToolBar>
                <MudCheckBox T="bool" Label="Show Visuals" @bind-Value="ShowVisualizations"></MudCheckBox>
            </MudItem>
            
            @if (ShowVisualizations)
            {
                var cats = _items.GroupBy(x => x.Category.Value)
                    .ToDictionary(x=>x.Key, x=>x.ToList());
                
                <MudItem md="6" xs="12">
                    <MudPaper>
                        <ApexChart TItem="StatementItem"
                                   @ref="@_apexPieChart"
                                   Title="Spending by Category"
                                   Options="_apexChartOptionsPie">
                            <ApexPointSeries TItem="StatementItem"
                                             Items="@_items"
                                             ShowDataLabels
                                             XValue="@(x=>x.Category.Value)"
                                             YAggregate="@(x=>x.Sum(y=>(decimal)y.Amount))"
                                             SeriesType="SeriesType.Pie"/>
                        </ApexChart>
                    </MudPaper>
                </MudItem>

                <MudItem md="6" xs="12">
                    <MudPaper>
                        <ApexChart TItem="StatementItem"
                                   @ref="@_apexTimeChart"
                                   Title="Spending by Category over time"
                                   Options="_apexChartTimeSeries">
                            @foreach (var category in cats)
                            {
                                <ApexPointSeries Items="@category.Value"
                                                 Name="@category.Key"
                                                 XValue="@(x => x.Date.ToString("yyyy-MM"))"
                                                 YAggregate="@(x=>x.Sum(y=>(decimal)y.Amount))"/>    
                            }
                        </ApexChart>
                    </MudPaper>
                </MudItem>
            }
            
            <MudItem sm="12">
                <StatementsTable Data="@_items"
                                 Height="400px"/>
            </MudItem>
        </MudGrid>    
    </MudContainer>
}
