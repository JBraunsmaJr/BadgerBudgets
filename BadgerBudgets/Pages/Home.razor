@page "/"
@using BadgerBudgets.Services
@inject StatementService StatementService
@inject ISnackbar SnackbarService

<PageTitle>Dashboard</PageTitle>

<MudContainer>
    <MudGrid Spacing="3" Class="pa-4">
        @foreach (var source in StatementService.SourceMaterials)
        {
            <MudFileUpload T="IBrowserFile" 
                           FilesChanged="@(file => OnFileUpload(source.Key, file))"
                           Accept=".csv"
                           Hidden="@false"
                           InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                           InputStyle="opacity:0">
                <ButtonTemplate>
                    <MudPaper Height="100%" Width="100%"
                              Outlined
                              Class="@_dragClass"
                              @ondragenter="@SetDragClass"
                              @ondragleave="@ClearDragClass"
                              @ondragend="@ClearDragClass">
                        <MudText Typo="Typo.h6">
                            Drag and drop files from @source.Key into here
                        </MudText>
                        
                        <MudButton HtmlTag="label"
                                   for="@context.Id"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Style="display: none">
                            Upload
                        </MudButton>
                    </MudPaper>
                </ButtonTemplate>
            </MudFileUpload>
        }
    </MudGrid>
</MudContainer>

@if (StatementService.Items.Count > 0)
{
    <MudContainer>
        <MudGrid Spacing="3" Class="pa-4">
                <MudItem sm="12">
                    <StatementsTable Data="StatementService.Items"
                                     OnShouldUpdate="@StateHasChanged"
                                     Height="400px"/>
                </MudItem>
            </MudGrid>    
    </MudContainer>
}


@code {
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;

    private void SetDragClass() => _dragClass = $"{DefaultDragClass} mud-border-primary";
    private void ClearDragClass() => _dragClass = DefaultDragClass;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await StatementService.LoadFromStorage();
    }

    async Task OnFileUpload(string sourceName, IBrowserFile uploadedFile)
    {
        try
        {
            using MemoryStream memStream = new();
            await uploadedFile.OpenReadStream().CopyToAsync(memStream);
            using TextReader reader = new StreamReader(memStream);
            memStream.Position = 0;

            var contents = await reader.ReadToEndAsync();

            var lines = contents.Split('\n');

            StatementService.ParseFile(sourceName, lines);
            SnackbarService.Add($"Import Successful. {StatementService.Items.Count} Total Records", Severity.Success);
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
        }
    }
}
