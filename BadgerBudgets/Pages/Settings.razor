@page "/settings"
@using BadgerBudgets.Services
@using BadgerBudgets.Models
@using Blazorise.Extensions
@inject StatementService StatementService
@inject IJSRuntime RuntimeService

<PageTitle>Dashboard</PageTitle>

<Heading Size="HeadingSize.Is3" Margin="Margin.Is5.OnY">
    Dashboard
    
    <Field>
        <FilePicker Upload="OnFileUpload"
                    ShowMode="FilePickerShowMode.List"/>
    </Field>
    
    <Field>
        <Button Color="Color.Success" Disabled="!StatementService.HasMappings" @onclick="DownloadConfiguration">
            <Blazorize.Material.Icon Class="@MaterialIcons.Download"/>
            Download Mappings
        </Button>
    </Field>
</Heading>

 <Paragraph>
     We need to sanitize data into a format Badger Budget understands. Can you please map
     the @_columnTypes.Count "types" of data for us?
 </Paragraph>
 
@if (!_hasUploadedMappings)
{
    <Row>
        @foreach (var headerItem in _header)
        {
            <Column ColumnSize="ColumnSize.Is3">
                <Field>
                    <FieldLabel>@headerItem</FieldLabel>
                    <Select TValue="ColumnType" @ref="Ref"
                            ElementId="@headerItem">
                        <SelectItem Value="ColumnType.None"></SelectItem>
                        <SelectItem Value="ColumnType.TransactionDate">Transaction Date</SelectItem>
                        <SelectItem Value="ColumnType.Amount">Amount</SelectItem>
                        <SelectItem Value="ColumnType.Credit">Credit</SelectItem>
                        <SelectItem Value="ColumnType.Debit">Debit</SelectItem>
                        <SelectItem Value="ColumnType.LineItem">Description</SelectItem>
                        <SelectItem Value="ColumnType.Category">Category</SelectItem>
                        <SelectItem Value="ColumnType.CreditDebitCombined">Credit & Debit</SelectItem>
                    </Select>
                </Field>    
            </Column>
        }
    </Row>
}
 
 <Row>
     <Column ColumnSize="ColumnSize.IsFull.OnDesktop.IsFull.OnWidescreen">
         <Card Margin="Margin.Is4.OnY" Border="Border.Dark">
             <CardHeader>
                 <CardTitle>File Contents</CardTitle>
             </CardHeader>
             <CardBody>
                 <Table Responsive Hoverable Striped>
                     <TableHeader>
                         @foreach (var headerItem in _header)
                         {
                             <TableHeaderCell>@headerItem</TableHeaderCell>
                         }
                     </TableHeader>
                     <TableBody>
                         @{
                             // Skip the header
                             foreach (var item in _fileContents)
                             {
                                 if (item.Trim().Length <= 0)
                                     continue;
                                 
                                 var cols = item.Split(',');
                                 <TableRow>
                                     @foreach (var col in cols)
                                     {
                                        <TableRowCell>@col</TableRowCell>
                                     }
                                </TableRow>    
                             }   
                         }
                     </TableBody>
                 </Table>
             </CardBody>
         </Card>
     </Column>
 </Row>   

@if (StatementService.HasContent)
{
    
}
else
{
    <Row>
        <Lead Margin="Margin.Is4.OnY">
            Please upload statements
        </Lead>
    </Row>
}

@code {
    private HashSet<string> _acceptableExtensions = new() { ".csv", ".txt" };
    private Dictionary<string, Select<ColumnType>> _mappingSelects = new();

    private Dictionary<string, ColumnType> _columnTypes = new()
    {
        ["Transaction Date"] = ColumnType.TransactionDate,
        ["Line Item"] = ColumnType.LineItem,
        ["Amount"] = ColumnType.Amount,
        ["Debit"] = ColumnType.Debit,
        ["Credit"] = ColumnType.Credit,
        ["Category"] = ColumnType.Category,
        ["Credit & Debit"] = ColumnType.CreditDebitCombined
    };

    Select<ColumnType> Ref
    {
        set
        {
            var count = _mappingSelects.Count;
            var headerText = _header[count];
            _mappingSelects.Add(headerText, value);
            
        }
    }

    private string[] _fileContents = Array.Empty<string>();
    private string[] _header = Array.Empty<string>();
    private bool _hasUploadedMappings = false;
    
    async Task OnFileUpload(FileUploadEventArgs e)
    {
        try
        {
            var info = new FileInfo(e.File.Name);
            
            if (!_acceptableExtensions.Contains(info.Extension))
                return;

            using MemoryStream memStream = new();
            await e.File.WriteToStreamAsync(memStream);
            using TextReader reader = new StreamReader(memStream);
            memStream.Position = 0;
            var contents = await reader.ReadToEndAsync();
            
            if (e.File.Name == "column-mappings.json")
            {
                var mappings = Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionary<ColumnType, int>>(contents); 
                StatementService.SetMappings(mappings ?? new());
                _hasUploadedMappings = true;
                StateHasChanged();
                return;
            }
            
            var lines = contents.Split('\n');
            _header = lines[0].Split(',');
            _fileContents = lines[1..];
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        foreach (var pair in _mappingSelects)
            pair.Value.SelectedValueChanged = EventCallback.Factory.Create<ColumnType>(this, () => OnHeaderLinkChange(pair.Key));
    }

    private void OnHeaderLinkChange(string headerText)
    {
        var selectedItem = _mappingSelects[headerText].SelectedValue;
        var headerIndex = _header.Index(x => x == headerText);
        StatementService.UpdateMapping(selectedItem, headerIndex);
    }

    private async Task DownloadConfiguration()
    {
        var file = System.Text.Encoding.UTF8.GetBytes(StatementService.SerializeMappings());
        await RuntimeService.InvokeVoidAsync("BlazorDownloadFile", "column-mappings.json", "text/json", file);
    }

}
